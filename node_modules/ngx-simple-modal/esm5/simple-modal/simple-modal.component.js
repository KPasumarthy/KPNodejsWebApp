import * as tslib_1 from "tslib";
import { HostListener } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
/**
 * Abstract modal
 * @template T - modal data;
 * @template T1 - modal result
 */
var SimpleModalComponent = /** @class */ (function () {
    /**
     * Constructor
     */
    function SimpleModalComponent() {
        /**
         * ready$ is when all animations and focusing have comleted
         */
        this._ready$ = new BehaviorSubject(false);
        /**
         * Callback to the holders close function
         */
        this.closerCallback = function () { return Promise.resolve(); };
    }
    /**
     * Maps your object passed in the creation to fields in your own Dialog classes
     * @param {T} data
     */
    SimpleModalComponent.prototype.mapDataObject = function (data) {
        data = data || {};
        var keys = Object.keys(data);
        for (var i = 0, length_1 = keys.length; i < length_1; i++) {
            var key = keys[i];
            if (data[key] &&
                this[key] &&
                typeof data[key] === 'object' &&
                typeof this[key] === 'object') {
                Object.assign(this[key], data[key]);
            }
            else {
                this[key] = data[key];
            }
        }
    };
    /**
     * Setup observer
     * @return {Observable<T1>}
     */
    SimpleModalComponent.prototype.setupObserver = function () {
        var _this = this;
        return Observable.create(function (observer) {
            _this.observer = observer;
            // called if observable is unsubscribed to
            return function () {
                _this.close();
            };
        });
    };
    /**
     * Defines what happens when close is called - default this
     * will just call the default remove modal process. If overriden
     * must include
     * @param callback
     */
    SimpleModalComponent.prototype.onClosing = function (callback) {
        this.closerCallback = callback;
    };
    /**
     * Closes modal
     */
    SimpleModalComponent.prototype.close = function () {
        var _this = this;
        return this.closerCallback(this).then(function (v) {
            if (_this.observer) {
                _this.observer.next(_this.result);
                _this.observer.complete();
            }
            return v;
        });
    };
    /**
     * keypress binding ngx way
     * @param evt
     */
    SimpleModalComponent.prototype.onKeydownHandler = function (evt) {
        if (this.options && this.options.closeOnEscape) {
            this.close();
        }
    };
    Object.defineProperty(SimpleModalComponent.prototype, "ready$", {
        get: function () {
            return this._ready$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    SimpleModalComponent.prototype.markAsReady = function () {
        this._ready$.next(true);
    };
    tslib_1.__decorate([
        HostListener('document:keydown.escape', ['$event'])
    ], SimpleModalComponent.prototype, "onKeydownHandler", null);
    return SimpleModalComponent;
}());
export { SimpleModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaW1wbGUtbW9kYWwvIiwic291cmNlcyI6WyJzaW1wbGUtbW9kYWwvc2ltcGxlLW1vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFjLFlBQVksRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFxQixlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFTdEU7Ozs7R0FJRztBQUNIO0lBZ0NFOztPQUVHO0lBQ0g7UUFiQTs7V0FFRztRQUNILFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUU5Qzs7V0FFRztRQUNLLG1CQUFjLEdBQWdDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUM7SUFLL0QsQ0FBQztJQUVoQjs7O09BR0c7SUFDSCw0Q0FBYSxHQUFiLFVBQWMsSUFBTztRQUNuQixJQUFJLEdBQUcsSUFBSSxJQUFPLEVBQUUsQ0FBQztRQUNyQixJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxRQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckQsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDVCxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUNULE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVE7Z0JBQzdCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFDN0I7Z0JBQ0EsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDckM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QjtTQUNGO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILDRDQUFhLEdBQWI7UUFBQSxpQkFTQztRQVJDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFBLFFBQVE7WUFDL0IsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFFekIsMENBQTBDO1lBQzFDLE9BQU87Z0JBQ0wsS0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2YsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCx3Q0FBUyxHQUFULFVBQVUsUUFBcUU7UUFDN0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUM7SUFDakMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsb0NBQUssR0FBTDtRQUFBLGlCQVFDO1FBUEMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUM7WUFDckMsSUFBSSxLQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2hDLEtBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDMUI7WUFDRCxPQUFPLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUVILCtDQUFnQixHQUFoQixVQUFpQixHQUFrQjtRQUNqQyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDOUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsc0JBQUksd0NBQU07YUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyQyxDQUFDOzs7T0FBQTtJQUVELDBDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBWkQ7UUFEQyxZQUFZLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztnRUFLbkQ7SUFTSCwyQkFBQztDQUFBLEFBbkhELElBbUhDO1NBbkhxQixvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgU3ViamVjdCwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBTaW1wbGVNb2RhbE9wdGlvbnMgfSBmcm9tICcuL3NpbXBsZS1tb2RhbC1vcHRpb25zJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT25EZXN0cm95TGlrZSB7XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICBba2V5OiBzdHJpbmddOiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBYnN0cmFjdCBtb2RhbFxyXG4gKiBAdGVtcGxhdGUgVCAtIG1vZGFsIGRhdGE7XHJcbiAqIEB0ZW1wbGF0ZSBUMSAtIG1vZGFsIHJlc3VsdFxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNpbXBsZU1vZGFsQ29tcG9uZW50PFQsIFQxPiB7XHJcbiAgLyoqXHJcbiAgICogT2JzZXJ2ZXIgdG8gcmV0dXJuIHJlc3VsdCBmcm9tIG1vZGFsXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBvYnNlcnZlcjogT2JzZXJ2ZXI8VDE+O1xyXG5cclxuICAvKipcclxuICAgKiBEaWFsb2cgcmVzdWx0XHJcbiAgICogQHR5cGUge1QxfVxyXG4gICAqL1xyXG4gIHJlc3VsdDogVDE7XHJcblxyXG4gIC8qKlxyXG4gICAqIERpYWxvZyB3cmFwcGVyIChtb2RhbCBwbGFjZWhvbGRlcilcclxuICAgKi9cclxuICB3cmFwcGVyOiBFbGVtZW50UmVmO1xyXG5cclxuICAvKipcclxuICAgKiByZWYgb2Ygb3B0aW9ucyBmb3IgdGhpcyBjb21wb25lbnRcclxuICAgKi9cclxuICBvcHRpb25zOiBTaW1wbGVNb2RhbE9wdGlvbnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlYWR5JCBpcyB3aGVuIGFsbCBhbmltYXRpb25zIGFuZCBmb2N1c2luZyBoYXZlIGNvbWxldGVkXHJcbiAgICovXHJcbiAgX3JlYWR5JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayB0byB0aGUgaG9sZGVycyBjbG9zZSBmdW5jdGlvblxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2xvc2VyQ2FsbGJhY2s6IChjb21wb25lbnQpID0+IFByb21pc2U8YW55PiA9ICgpID0+IFByb21pc2UucmVzb2x2ZSgpO1xyXG5cclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3RvclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgLyoqXHJcbiAgICogTWFwcyB5b3VyIG9iamVjdCBwYXNzZWQgaW4gdGhlIGNyZWF0aW9uIHRvIGZpZWxkcyBpbiB5b3VyIG93biBEaWFsb2cgY2xhc3Nlc1xyXG4gICAqIEBwYXJhbSB7VH0gZGF0YVxyXG4gICAqL1xyXG4gIG1hcERhdGFPYmplY3QoZGF0YTogVCk6IHZvaWQge1xyXG4gICAgZGF0YSA9IGRhdGEgfHwgPFQ+e307XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZGF0YVtrZXldICYmXHJcbiAgICAgICAgdGhpc1trZXldICYmXHJcbiAgICAgICAgdHlwZW9mIGRhdGFba2V5XSA9PT0gJ29iamVjdCcgJiZcclxuICAgICAgICB0eXBlb2YgdGhpc1trZXldID09PSAnb2JqZWN0J1xyXG4gICAgICApIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXNba2V5XSwgZGF0YVtrZXldKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzW2tleV0gPSBkYXRhW2tleV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHVwIG9ic2VydmVyXHJcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxUMT59XHJcbiAgICovXHJcbiAgc2V0dXBPYnNlcnZlcigpOiBPYnNlcnZhYmxlPFQxPiB7XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUob2JzZXJ2ZXIgPT4ge1xyXG4gICAgICB0aGlzLm9ic2VydmVyID0gb2JzZXJ2ZXI7XHJcblxyXG4gICAgICAvLyBjYWxsZWQgaWYgb2JzZXJ2YWJsZSBpcyB1bnN1YnNjcmliZWQgdG9cclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlZmluZXMgd2hhdCBoYXBwZW5zIHdoZW4gY2xvc2UgaXMgY2FsbGVkIC0gZGVmYXVsdCB0aGlzXHJcbiAgICogd2lsbCBqdXN0IGNhbGwgdGhlIGRlZmF1bHQgcmVtb3ZlIG1vZGFsIHByb2Nlc3MuIElmIG92ZXJyaWRlblxyXG4gICAqIG11c3QgaW5jbHVkZVxyXG4gICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAqL1xyXG4gIG9uQ2xvc2luZyhjYWxsYmFjazogKGNvbXBvbmVudDogU2ltcGxlTW9kYWxDb21wb25lbnQ8YW55LCBhbnk+KSA9PiBQcm9taXNlPGFueT4pOiB2b2lkIHtcclxuICAgIHRoaXMuY2xvc2VyQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb3NlcyBtb2RhbFxyXG4gICAqL1xyXG4gIGNsb3NlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5jbG9zZXJDYWxsYmFjayh0aGlzKS50aGVuKHYgPT4ge1xyXG4gICAgICBpZiAodGhpcy5vYnNlcnZlcikge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXIubmV4dCh0aGlzLnJlc3VsdCk7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB2O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBrZXlwcmVzcyBiaW5kaW5nIG5neCB3YXlcclxuICAgKiBAcGFyYW0gZXZ0XHJcbiAgICovXHJcbiAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6a2V5ZG93bi5lc2NhcGUnLCBbJyRldmVudCddKVxyXG4gIG9uS2V5ZG93bkhhbmRsZXIoZXZ0OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uRXNjYXBlKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCByZWFkeSQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVhZHkkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgbWFya0FzUmVhZHkoKSB7XHJcbiAgICB0aGlzLl9yZWFkeSQubmV4dCh0cnVlKTtcclxuICB9XHJcbn1cclxuIl19