import * as tslib_1 from "tslib";
var SimpleModalModule_1;
import { CommonModule } from '@angular/common';
import { ApplicationRef, ComponentFactoryResolver, Injector, NgModule, } from '@angular/core';
import { SimpleModalHolderComponent } from './simple-modal-holder.component';
import { SimpleModalWrapperComponent } from './simple-modal-wrapper.component';
import { SimpleModalService, SimpleModalServiceConfig } from './simple-modal.service';
import { SimpleModalServiceFactory } from './simple-modal-service.factory';
import { defaultSimpleModalOptions, DefaultSimpleModalOptionConfig, } from './simple-modal-options';
const ɵ0 = defaultSimpleModalOptions;
let SimpleModalModule = SimpleModalModule_1 = class SimpleModalModule {
    constructor() { }
    static forRoot(config, defaultModalOptions) {
        return {
            ngModule: SimpleModalModule_1,
            providers: [
                { provide: SimpleModalServiceConfig, useValue: config },
                {
                    provide: SimpleModalService,
                    useFactory: SimpleModalServiceFactory,
                    deps: [ComponentFactoryResolver, ApplicationRef, Injector, SimpleModalServiceConfig],
                },
                {
                    provide: DefaultSimpleModalOptionConfig,
                    useValue: defaultModalOptions || defaultSimpleModalOptions,
                },
            ],
        };
    }
};
SimpleModalModule = SimpleModalModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [SimpleModalHolderComponent, SimpleModalWrapperComponent],
        providers: [
            SimpleModalService,
            {
                provide: DefaultSimpleModalOptionConfig,
                useValue: ɵ0,
            },
        ],
        imports: [CommonModule],
        entryComponents: [SimpleModalHolderComponent, SimpleModalWrapperComponent],
    })
], SimpleModalModule);
export { SimpleModalModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLW1vZGFsLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zaW1wbGUtbW9kYWwvIiwic291cmNlcyI6WyJzaW1wbGUtbW9kYWwvc2ltcGxlLW1vZGFsLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsY0FBYyxFQUNkLHdCQUF3QixFQUN4QixRQUFRLEVBRVIsUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsOEJBQThCLEdBRS9CLE1BQU0sd0JBQXdCLENBQUM7V0FRaEIseUJBQXlCO0FBTXpDLElBQWEsaUJBQWlCLHlCQUE5QixNQUFhLGlCQUFpQjtJQXNCNUIsZ0JBQWUsQ0FBQztJQXJCaEIsTUFBTSxDQUFDLE9BQU8sQ0FDWixNQUFnQyxFQUNoQyxtQkFBd0M7UUFFeEMsT0FBTztZQUNMLFFBQVEsRUFBRSxtQkFBaUI7WUFDM0IsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQ3ZEO29CQUNFLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFVBQVUsRUFBRSx5QkFBeUI7b0JBQ3JDLElBQUksRUFBRSxDQUFDLHdCQUF3QixFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLENBQUM7aUJBQ3JGO2dCQUNEO29CQUNFLE9BQU8sRUFBRSw4QkFBOEI7b0JBQ3ZDLFFBQVEsRUFBRSxtQkFBbUIsSUFBSSx5QkFBeUI7aUJBQzNEO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUdGLENBQUE7QUF2QlksaUJBQWlCO0lBWjdCLFFBQVEsQ0FBQztRQUNSLFlBQVksRUFBRSxDQUFDLDBCQUEwQixFQUFFLDJCQUEyQixDQUFDO1FBQ3ZFLFNBQVMsRUFBRTtZQUNULGtCQUFrQjtZQUNsQjtnQkFDRSxPQUFPLEVBQUUsOEJBQThCO2dCQUN2QyxRQUFRLElBQTJCO2FBQ3BDO1NBQ0Y7UUFDRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7UUFDdkIsZUFBZSxFQUFFLENBQUMsMEJBQTBCLEVBQUUsMkJBQTJCLENBQUM7S0FDM0UsQ0FBQztHQUNXLGlCQUFpQixDQXVCN0I7U0F2QlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHtcclxuICBBcHBsaWNhdGlvblJlZixcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgSW5qZWN0b3IsXHJcbiAgTW9kdWxlV2l0aFByb3ZpZGVycyxcclxuICBOZ01vZHVsZSxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNpbXBsZU1vZGFsSG9sZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9zaW1wbGUtbW9kYWwtaG9sZGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbXBsZU1vZGFsV3JhcHBlckNvbXBvbmVudCB9IGZyb20gJy4vc2ltcGxlLW1vZGFsLXdyYXBwZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2ltcGxlTW9kYWxTZXJ2aWNlLCBTaW1wbGVNb2RhbFNlcnZpY2VDb25maWcgfSBmcm9tICcuL3NpbXBsZS1tb2RhbC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2ltcGxlTW9kYWxTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4vc2ltcGxlLW1vZGFsLXNlcnZpY2UuZmFjdG9yeSc7XHJcbmltcG9ydCB7XHJcbiAgZGVmYXVsdFNpbXBsZU1vZGFsT3B0aW9ucyxcclxuICBEZWZhdWx0U2ltcGxlTW9kYWxPcHRpb25Db25maWcsXHJcbiAgU2ltcGxlTW9kYWxPcHRpb25zLFxyXG59IGZyb20gJy4vc2ltcGxlLW1vZGFsLW9wdGlvbnMnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtTaW1wbGVNb2RhbEhvbGRlckNvbXBvbmVudCwgU2ltcGxlTW9kYWxXcmFwcGVyQ29tcG9uZW50XSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIFNpbXBsZU1vZGFsU2VydmljZSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogRGVmYXVsdFNpbXBsZU1vZGFsT3B0aW9uQ29uZmlnLFxyXG4gICAgICB1c2VWYWx1ZTogZGVmYXVsdFNpbXBsZU1vZGFsT3B0aW9ucyxcclxuICAgIH0sXHJcbiAgXSxcclxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcclxuICBlbnRyeUNvbXBvbmVudHM6IFtTaW1wbGVNb2RhbEhvbGRlckNvbXBvbmVudCwgU2ltcGxlTW9kYWxXcmFwcGVyQ29tcG9uZW50XSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNpbXBsZU1vZGFsTW9kdWxlIHtcclxuICBzdGF0aWMgZm9yUm9vdChcclxuICAgIGNvbmZpZzogU2ltcGxlTW9kYWxTZXJ2aWNlQ29uZmlnLFxyXG4gICAgZGVmYXVsdE1vZGFsT3B0aW9ucz86IFNpbXBsZU1vZGFsT3B0aW9uc1xyXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IFNpbXBsZU1vZGFsTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IFNpbXBsZU1vZGFsU2VydmljZUNvbmZpZywgdXNlVmFsdWU6IGNvbmZpZyB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IFNpbXBsZU1vZGFsU2VydmljZSxcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IFNpbXBsZU1vZGFsU2VydmljZUZhY3RvcnksXHJcbiAgICAgICAgICBkZXBzOiBbQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBBcHBsaWNhdGlvblJlZiwgSW5qZWN0b3IsIFNpbXBsZU1vZGFsU2VydmljZUNvbmZpZ10sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBEZWZhdWx0U2ltcGxlTW9kYWxPcHRpb25Db25maWcsXHJcbiAgICAgICAgICB1c2VWYWx1ZTogZGVmYXVsdE1vZGFsT3B0aW9ucyB8fCBkZWZhdWx0U2ltcGxlTW9kYWxPcHRpb25zLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG59XHJcbiJdfQ==