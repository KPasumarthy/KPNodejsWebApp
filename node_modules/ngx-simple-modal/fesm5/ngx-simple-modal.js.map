{"version":3,"file":"ngx-simple-modal.js","sources":["ng://ngx-simple-modal/simple-modal/simple-modal-options.ts","ng://ngx-simple-modal/simple-modal/simple-modal-wrapper.component.ts","ng://ngx-simple-modal/simple-modal/simple-modal-holder.component.ts","ng://ngx-simple-modal/simple-modal/simple-modal.service.ts","ng://ngx-simple-modal/simple-modal/simple-modal-service.factory.ts","ng://ngx-simple-modal/simple-modal/simple-modal.module.ts","ng://ngx-simple-modal/simple-modal/simple-modal.component.ts","ng://ngx-simple-modal/ngx-simple-modal.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const DefaultSimpleModalOptionConfig = new InjectionToken<SimpleModalOptions>('default-simple-modal.config');\r\n\r\nexport interface SimpleModalOptions {\r\n  closeOnEscape: boolean;\r\n  closeOnClickOutside: boolean;\r\n  bodyClass: string;\r\n  wrapperDefaultClasses: string;\r\n  wrapperClass: string;\r\n  animationDuration: number;\r\n  autoFocus: boolean;\r\n}\r\n\r\nexport type SimpleModalOptionsOverrides = Partial<SimpleModalOptions>;\r\n\r\nexport const defaultSimpleModalOptions: SimpleModalOptions = {\r\n  closeOnEscape: false,\r\n  closeOnClickOutside: false,\r\n  bodyClass: 'modal-open',\r\n  wrapperDefaultClasses: 'modal fade-anim',\r\n  wrapperClass: 'in',\r\n  animationDuration: 300,\r\n  autoFocus: false\r\n};\r\n","import {\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  ElementRef,\r\n  OnDestroy,\r\n  ReflectiveInjector,\r\n  Type,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { SimpleModalComponent } from './simple-modal.component';\r\n\r\n/**\r\n * The modal backdrop wrapping wrapper to the modal\r\n */\r\n@Component({\r\n  selector: 'simple-modal-wrapper',\r\n  template: `\r\n    <div #wrapper [ngClass]=\"modalClasses\" [ngStyle]=\"{ display: 'block' }\" role=\"dialog\">\r\n      <ng-template #viewContainer></ng-template>\r\n    </div>\r\n  `,\r\n})\r\nexport class SimpleModalWrapperComponent implements OnDestroy {\r\n  /**\r\n   * Target viewContainer to insert modal content component\r\n   */\r\n  @ViewChild('viewContainer', { read: ViewContainerRef, static: true }) viewContainer;\r\n\r\n  /**\r\n   * Link wrapper DOM element\r\n   */\r\n  @ViewChild('wrapper', { read: ElementRef, static: true })\r\n  wrapper: ElementRef;\r\n\r\n  /**\r\n   * Wrapper modal and fade classes\r\n   */\r\n  modalClasses = 'modal fade-anim';\r\n\r\n  /**\r\n   * Dialog content componet\r\n   * @type {SimpleModalComponent}\r\n   */\r\n  content: SimpleModalComponent<any, any>;\r\n\r\n  /**\r\n   * Click outside callback\r\n   */\r\n  clickOutsideCallback: (event: MouseEvent) => void;\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {ComponentFactoryResolver} resolver\r\n   */\r\n  constructor(private resolver: ComponentFactoryResolver) {}\r\n\r\n  /**\r\n   * Adds content modal component to wrapper\r\n   * @param {Type<SimpleModalComponent>} component\r\n   * @return {SimpleModalComponent}\r\n   */\r\n  addComponent<T, T1>(component: Type<SimpleModalComponent<T, T1>>) {\r\n    const factory = this.resolver.resolveComponentFactory(component);\r\n    const injector = ReflectiveInjector.fromResolvedProviders([], this.viewContainer.injector);\r\n    const componentRef = factory.create(injector);\r\n    this.viewContainer.insert(componentRef.hostView);\r\n    this.content = <SimpleModalComponent<T, T1>>componentRef.instance;\r\n    this.content.wrapper = this.wrapper;\r\n    return this.content;\r\n  }\r\n\r\n  /**\r\n   * Configures the function to call when you click on background of a modal but not the contents\r\n   * @param callback\r\n   */\r\n  onClickOutsideModalContent(callback: () => void) {\r\n    const containerEl = this.wrapper.nativeElement;\r\n\r\n    this.clickOutsideCallback = (event: MouseEvent) => {\r\n      if (event.target === containerEl) {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    containerEl.addEventListener('click', this.clickOutsideCallback, false);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.clickOutsideCallback) {\r\n      const containerEl = this.wrapper.nativeElement;\r\n      containerEl.removeEventListener('click', this.clickOutsideCallback, false);\r\n      this.clickOutsideCallback = null;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ComponentFactoryResolver,\r\n  ElementRef,\r\n  Inject,\r\n  Type,\r\n  ViewContainerRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport {\r\n  DefaultSimpleModalOptionConfig,\r\n  SimpleModalOptions,\r\n  SimpleModalOptionsOverrides,\r\n} from './simple-modal-options';\r\nimport { SimpleModalWrapperComponent } from './simple-modal-wrapper.component';\r\nimport { SimpleModalComponent } from './simple-modal.component';\r\n\r\n/**\r\n * View container manager which manages a list of modals currently active\r\n * inside the viewvontainer\r\n */\r\n@Component({\r\n  selector: 'simple-modal-holder',\r\n  template: '<ng-template #viewContainer></ng-template>',\r\n})\r\nexport class SimpleModalHolderComponent {\r\n  /**\r\n   * Target viewContainer to insert modals\r\n   */\r\n  @ViewChild('viewContainer', { read: ViewContainerRef, static: true }) viewContainer;\r\n\r\n  /**\r\n   * modal collection, maintained by addModal and removeModal\r\n   * @type {Array<SimpleModalComponent> }\r\n   */\r\n  modals: Array<SimpleModalComponent<any, any>> = [];\r\n\r\n  /**\r\n   * if auto focus is on and no element focused, store it here to be restored back after close\r\n   */\r\n  previousActiveElement = null;\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {ComponentFactoryResolver} resolver\r\n   */\r\n  constructor(\r\n    private resolver: ComponentFactoryResolver,\r\n    @Inject(DefaultSimpleModalOptionConfig) private defaultSimpleModalOptions: SimpleModalOptions\r\n  ) {}\r\n\r\n  /**\r\n   * Configures then adds modal to the modals array, and populates with data passed in\r\n   * @param {Type<SimpleModalComponent>} component\r\n   * @param {object?} data\r\n   * @param {SimpleModalOptionsOverrides?} options\r\n   * @return {Observable<*>}\r\n   */\r\n  addModal<T, T1>(\r\n    component: Type<SimpleModalComponent<T, T1>>,\r\n    data?: T,\r\n    options?: SimpleModalOptionsOverrides\r\n  ): Observable<T1> {\r\n    // create component\r\n    if (!this.viewContainer) {\r\n      return of(null);\r\n    }\r\n    const factory = this.resolver.resolveComponentFactory(SimpleModalWrapperComponent);\r\n    const componentRef = this.viewContainer.createComponent(factory);\r\n    const modalWrapper: SimpleModalWrapperComponent = <SimpleModalWrapperComponent>(\r\n      componentRef.instance\r\n    );\r\n    const _component: SimpleModalComponent<T, T1> = modalWrapper.addComponent(component);\r\n\r\n    // assign options refs\r\n    _component.options = options = Object.assign({}, this.defaultSimpleModalOptions, options);\r\n\r\n    // set base classes for wrapper\r\n    modalWrapper.modalClasses = options.wrapperDefaultClasses;\r\n\r\n    // add to stack\r\n    this.modals.push(_component);\r\n\r\n    // wait a tick then setup the following while adding a modal\r\n    this.wait().then(() => {\r\n      this.toggleWrapperClass(modalWrapper.wrapper, options.wrapperClass);\r\n      this.toggleBodyClass(options.bodyClass);\r\n      this.wait(options.animationDuration).then(() => {\r\n        this.autoFocusFirstElement(_component.wrapper, options.autoFocus);\r\n        _component.markAsReady();\r\n      });\r\n    });\r\n\r\n    // when closing modal remove it\r\n    _component.onClosing(modal => this.removeModal(modal));\r\n\r\n    // if clicking on background closes modal\r\n    this.configureCloseOnClickOutside(modalWrapper);\r\n\r\n    // map and return observable\r\n    _component.mapDataObject(data);\r\n\r\n    return _component.setupObserver();\r\n  }\r\n\r\n  /**\r\n   * triggers components close function\r\n   * to take effect\r\n   * @param {SimpleModalComponent} component\r\n   * @returns {Promise<void>}\r\n   */\r\n  removeModal(closingModal: SimpleModalComponent<any, any>): Promise<any> {\r\n    const options = closingModal.options;\r\n    this.toggleWrapperClass(closingModal.wrapper, options.wrapperClass);\r\n    return this.wait(options.animationDuration).then(() => {\r\n      this.removeModalFromArray(closingModal);\r\n      this.toggleBodyClass(options.bodyClass);\r\n      this.restorePreviousFocus();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Instructs all open modals to\r\n   */\r\n  removeAllModals(): Promise<any> {\r\n    return Promise.all(this.modals.map(modal => this.removeModal(modal)));\r\n  }\r\n\r\n  /**\r\n   * Bind a body class 'modal-open' to a condition of modals in pool > 0\r\n   * @param bodyClass - string to add and remove from body in document\r\n   */\r\n  private toggleBodyClass(bodyClass: string) {\r\n    if (!bodyClass) {\r\n      return;\r\n    }\r\n    const body = document.getElementsByTagName('body')[0];\r\n    const bodyClassItems = bodyClass.split(' ');\r\n    if (!this.modals.length) {\r\n      body.classList.remove(...bodyClassItems);\r\n    } else {\r\n      body.classList.add(...bodyClassItems);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * if the option to close on background click is set, then hook up a callback\r\n   * @param options\r\n   * @param modalWrapper\r\n   */\r\n  private configureCloseOnClickOutside(modalWrapper: SimpleModalWrapperComponent) {\r\n    if (modalWrapper.content.options.closeOnClickOutside) {\r\n      modalWrapper.onClickOutsideModalContent(() => {\r\n        modalWrapper.content.close();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Auto focus o the first element if autofocus is on\r\n   * @param options\r\n   * @param modalWrapperEl\r\n   */\r\n  private autoFocusFirstElement(componentWrapper: ElementRef, autoFocus: boolean) {\r\n    if (autoFocus) {\r\n      const focusable = componentWrapper.nativeElement.querySelectorAll(\r\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      if (focusable && focusable.length) {\r\n        this.previousActiveElement = document.activeElement;\r\n        focusable[0].focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restores the last focus is there was one\r\n   */\r\n  private restorePreviousFocus() {\r\n    if (this.previousActiveElement) {\r\n      this.previousActiveElement.focus();\r\n      this.previousActiveElement = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configure the adding and removal of a wrapper class - predominantly animation focused\r\n   * @param options\r\n   * @param modalWrapperEl\r\n   */\r\n  private toggleWrapperClass(modalWrapperEl: ElementRef, wrapperClass: string) {\r\n    const wrapperClassList = modalWrapperEl.nativeElement.classList;\r\n    const wrapperClassItems = wrapperClass.split(' ');\r\n    if (wrapperClassList.toString().indexOf(wrapperClass) !== -1) {\r\n      wrapperClassList.remove(...wrapperClassItems);\r\n    } else {\r\n      wrapperClassList.add(...wrapperClassItems);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper function for a more readable timeout\r\n   * @param ms\r\n   */\r\n  private wait(ms: number = 0) {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => resolve(), ms);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Instructs the holder to remove the modal and\r\n   * removes this component from the collection\r\n   * @param {SimpleModalComponent} component\r\n   */\r\n  private removeModalFromArray(component) {\r\n    const index = this.modals.indexOf(component);\r\n    if (index > -1) {\r\n      this.viewContainer.remove(index);\r\n      this.modals.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  EmbeddedViewRef,\r\n  Injectable,\r\n  Injector,\r\n  Optional,\r\n  Type,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { SimpleModalHolderComponent } from './simple-modal-holder.component';\r\nimport { SimpleModalComponent } from './simple-modal.component';\r\nimport { SimpleModalOptionsOverrides } from './simple-modal-options';\r\n\r\nexport class SimpleModalServiceConfig {\r\n  container: HTMLElement | string = null;\r\n}\r\n\r\n@Injectable()\r\nexport class SimpleModalService {\r\n  /**\r\n   * Placeholder of modals\r\n   * @type {SimpleModalHolderComponent}\r\n   */\r\n  private modalHolderComponent: SimpleModalHolderComponent;\r\n\r\n  /**\r\n   * HTML container for modals\r\n   * type {HTMLElement | string}\r\n   */\r\n  private _container;\r\n\r\n  /**\r\n   * @param {ComponentFactoryResolver} resolver\r\n   * @param {ApplicationRef} applicationRef\r\n   * @param {Injector} injector\r\n   * @param {SimpleModalServiceConfig} config\r\n   */\r\n  constructor(\r\n    private resolver: ComponentFactoryResolver,\r\n    private applicationRef: ApplicationRef,\r\n    private injector: Injector,\r\n    @Optional() config: SimpleModalServiceConfig\r\n  ) {\r\n    if (config) {\r\n      this.container = config.container as any;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds modal\r\n   * @param {Type<SimpleModalComponent<T, T1>>} component\r\n   * @param {T?} data\r\n   * @param {SimpleModalOptionsOverrides?} options\r\n   * @return {Observable<T1>}\r\n   */\r\n  addModal<T, T1>(\r\n    component: Type<SimpleModalComponent<T, T1>>,\r\n    data?: T,\r\n    options?: SimpleModalOptionsOverrides\r\n  ): Observable<T1> {\r\n    if (!this.modalHolderComponent) {\r\n      this.modalHolderComponent = this.createSimpleModalHolder();\r\n    }\r\n    return this.modalHolderComponent.addModal<T, T1>(component, data, options);\r\n  }\r\n\r\n  /**\r\n   * Hides and removes modal from DOM, resolves promise when fully removed\r\n   * @param {SimpleModalComponent} component\r\n   * @return {Promise<{}>}\r\n\r\n   */\r\n  removeModal(component: SimpleModalComponent<any, any>): Promise<{}> {\r\n    if (!this.modalHolderComponent) {\r\n      return Promise.resolve({});\r\n    }\r\n    return this.modalHolderComponent.removeModal(component);\r\n  }\r\n\r\n  /**\r\n   * Closes all modals, resolves promise when they're fully removed\r\n   * @return {Promise<{}>}\r\n   */\r\n  removeAll(): Promise<{}> {\r\n    if (!this.modalHolderComponent) {\r\n      return Promise.resolve({});\r\n    }\r\n    return this.modalHolderComponent.removeAllModals();\r\n  }\r\n\r\n  /**\r\n   * Accessor for contain - will auto generate from string\r\n   * if needed or default to the root element if nothing was set\r\n   */\r\n\r\n  private set container(c) {\r\n    this._container = c;\r\n  }\r\n\r\n  private get container(): HTMLElement {\r\n    if (typeof this._container === 'string') {\r\n      this._container = document.getElementById(this._container);\r\n    }\r\n\r\n    if (!this._container && this.applicationRef['components'].length) {\r\n      const componentRootViewContainer = this.applicationRef['components'][0];\r\n      this.container = (componentRootViewContainer.hostView as EmbeddedViewRef<any>)\r\n        .rootNodes[0] as HTMLElement;\r\n    }\r\n\r\n    // fallback\r\n    if (!this._container || typeof this._container === 'string') {\r\n      this._container = document.getElementsByTagName('body')[0];\r\n    }\r\n\r\n    return this._container;\r\n  }\r\n\r\n  /**\r\n   * Creates and add to DOM modal holder component\r\n   * @return {SimpleModalHolderComponent}\r\n   */\r\n  private createSimpleModalHolder(): SimpleModalHolderComponent {\r\n    const componentFactory = this.resolver.resolveComponentFactory(SimpleModalHolderComponent);\r\n\r\n    const componentRef = componentFactory.create(this.injector);\r\n    const componentRootNode = (componentRef.hostView as EmbeddedViewRef<any>)\r\n      .rootNodes[0] as HTMLElement;\r\n\r\n    this.applicationRef.attachView(componentRef.hostView);\r\n\r\n    componentRef.onDestroy(() => {\r\n      this.applicationRef.detachView(componentRef.hostView);\r\n    });\r\n\r\n    this.container.appendChild(componentRootNode);\r\n\r\n    return componentRef.instance;\r\n  }\r\n}\r\n","import { ApplicationRef, ComponentFactoryResolver, Injector } from '@angular/core';\r\n\r\nimport { SimpleModalService, SimpleModalServiceConfig } from './simple-modal.service';\r\n\r\n/**\r\n * Modal service factory. Creates modal service with options\r\n * @param { ComponentFactoryResolver } resolver\r\n * @param { ApplicationRef } applicationRef\r\n * @param { Injector } injector\r\n * @param { SimpleModalServiceConfig } options\r\n * @return { SimpleModalService }\r\n */\r\nexport function SimpleModalServiceFactory(resolver: ComponentFactoryResolver,\r\n                                          applicationRef: ApplicationRef,\r\n                                          injector: Injector,\r\n                                          options: SimpleModalServiceConfig) {\r\n    return new SimpleModalService(resolver, applicationRef, injector, options);\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  Injector,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n} from '@angular/core';\r\n\r\nimport { SimpleModalHolderComponent } from './simple-modal-holder.component';\r\nimport { SimpleModalWrapperComponent } from './simple-modal-wrapper.component';\r\nimport { SimpleModalService, SimpleModalServiceConfig } from './simple-modal.service';\r\nimport { SimpleModalServiceFactory } from './simple-modal-service.factory';\r\nimport {\r\n  defaultSimpleModalOptions,\r\n  DefaultSimpleModalOptionConfig,\r\n  SimpleModalOptions,\r\n} from './simple-modal-options';\r\n\r\n@NgModule({\r\n  declarations: [SimpleModalHolderComponent, SimpleModalWrapperComponent],\r\n  providers: [\r\n    SimpleModalService,\r\n    {\r\n      provide: DefaultSimpleModalOptionConfig,\r\n      useValue: defaultSimpleModalOptions,\r\n    },\r\n  ],\r\n  imports: [CommonModule],\r\n  entryComponents: [SimpleModalHolderComponent, SimpleModalWrapperComponent],\r\n})\r\nexport class SimpleModalModule {\r\n  static forRoot(\r\n    config: SimpleModalServiceConfig,\r\n    defaultModalOptions?: SimpleModalOptions\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: SimpleModalModule,\r\n      providers: [\r\n        { provide: SimpleModalServiceConfig, useValue: config },\r\n        {\r\n          provide: SimpleModalService,\r\n          useFactory: SimpleModalServiceFactory,\r\n          deps: [ComponentFactoryResolver, ApplicationRef, Injector, SimpleModalServiceConfig],\r\n        },\r\n        {\r\n          provide: DefaultSimpleModalOptionConfig,\r\n          useValue: defaultModalOptions || defaultSimpleModalOptions,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n","import { ElementRef, HostListener, OnDestroy } from '@angular/core';\r\nimport { Observable, Observer, Subject, BehaviorSubject } from 'rxjs';\r\n\r\nimport { SimpleModalOptions } from './simple-modal-options';\r\n\r\nexport interface OnDestroyLike {\r\n  ngOnDestroy(): void;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Abstract modal\r\n * @template T - modal data;\r\n * @template T1 - modal result\r\n */\r\nexport abstract class SimpleModalComponent<T, T1> {\r\n  /**\r\n   * Observer to return result from modal\r\n   */\r\n  private observer: Observer<T1>;\r\n\r\n  /**\r\n   * Dialog result\r\n   * @type {T1}\r\n   */\r\n  result: T1;\r\n\r\n  /**\r\n   * Dialog wrapper (modal placeholder)\r\n   */\r\n  wrapper: ElementRef;\r\n\r\n  /**\r\n   * ref of options for this component\r\n   */\r\n  options: SimpleModalOptions;\r\n\r\n  /**\r\n   * ready$ is when all animations and focusing have comleted\r\n   */\r\n  _ready$ = new BehaviorSubject<boolean>(false);\r\n\r\n  /**\r\n   * Callback to the holders close function\r\n   */\r\n  private closerCallback: (component) => Promise<any> = () => Promise.resolve();\r\n\r\n  /**\r\n   * Constructor\r\n   */\r\n  constructor() {}\r\n\r\n  /**\r\n   * Maps your object passed in the creation to fields in your own Dialog classes\r\n   * @param {T} data\r\n   */\r\n  mapDataObject(data: T): void {\r\n    data = data || <T>{};\r\n    const keys = Object.keys(data);\r\n    for (let i = 0, length = keys.length; i < length; i++) {\r\n      const key = keys[i];\r\n      if (\r\n        data[key] &&\r\n        this[key] &&\r\n        typeof data[key] === 'object' &&\r\n        typeof this[key] === 'object'\r\n      ) {\r\n        Object.assign(this[key], data[key]);\r\n      } else {\r\n        this[key] = data[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup observer\r\n   * @return {Observable<T1>}\r\n   */\r\n  setupObserver(): Observable<T1> {\r\n    return Observable.create(observer => {\r\n      this.observer = observer;\r\n\r\n      // called if observable is unsubscribed to\r\n      return () => {\r\n        this.close();\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Defines what happens when close is called - default this\r\n   * will just call the default remove modal process. If overriden\r\n   * must include\r\n   * @param callback\r\n   */\r\n  onClosing(callback: (component: SimpleModalComponent<any, any>) => Promise<any>): void {\r\n    this.closerCallback = callback;\r\n  }\r\n\r\n  /**\r\n   * Closes modal\r\n   */\r\n  close(): Promise<any> {\r\n    return this.closerCallback(this).then(v => {\r\n      if (this.observer) {\r\n        this.observer.next(this.result);\r\n        this.observer.complete();\r\n      }\r\n      return v;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * keypress binding ngx way\r\n   * @param evt\r\n   */\r\n  @HostListener('document:keydown.escape', ['$event'])\r\n  onKeydownHandler(evt: KeyboardEvent) {\r\n    if (this.options && this.options.closeOnEscape) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  get ready$() {\r\n    return this._ready$.asObservable();\r\n  }\r\n\r\n  markAsReady() {\r\n    this._ready$.next(true);\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {SimpleModalHolderComponent as Éµa} from './simple-modal/simple-modal-holder.component';\nexport {SimpleModalServiceFactory as Éµc} from './simple-modal/simple-modal-service.factory';\nexport {SimpleModalWrapperComponent as Éµb} from './simple-modal/simple-modal-wrapper.component';"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}